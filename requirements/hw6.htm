
<!-- saved from url=(0137)https://blackboard.stonybrook.edu/bbcswebdav/pid-5262632-dt-content-rid-40554589_1/courses/1204-CSE-416-SEC02-51332/hw6-code1%281%29.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252">

</head>
<body lang="EN-US" class="vsc-initialized">

<center>
CSE416: Software Engineering<br>
Scott Stoller<br>
<b>hw6: code1</b><br>
version: 2020-03-16<br>
due: see schedule
</center>

Your hw6 submission should include the following.

<hr>
<h3>1. Persistence</h3>

<h3>1.1 Data model</h3>

<p>For information stored in a relational database with manually designed tables (as opposed to tables generated automatically by a persistence framework), this section should contain database table definitions (schemas), showing the name and type of each column, and primary key and foreign key constraints.  Accompanying text should briefly describe the meaning of tables and columns whose meaning is not obvious from the name. If this information is present in well-documented SQL "create table" statements in the submitted code, it is sufficient to identify which files contain them.  Briefly discuss which parts of the data model are normalized, which parts are not, and why.</p>

<p>For information stored in a document-oriented (NoSQL) database, this section should describe the document structure and any primary and secondary indices.</p>

<p>For information stored in a database using a persistence framework, this section should provide all of the information needed to configure the persistence framework to map persistent entities, attributes, and relationships to the database, with appropriate primary keys.  The exact format of this information depends on the persistence framework.  If this information is present in your submitted code, it is sufficient to identify which files contain it.</p>

<p>For information stored in files, this section should specify the file formats.</p>

<p>This information should be provided for all persistent entities in the design.  Your hw6 code does not need to implement persistence for all of them.</p>

<h3>1.2 Queries</h3>

<p>Briefly describe how filtering of colleges (for college search) and filtering of user profiles (for applications tracker) is or will be implemented.  Will it be done by creating a database query that embodies all of the specified filter conditions?  By a combination of a database query and application code?  If a query language is used, which one?</p>

<hr>
<h3>2. Code Conventions</h3>

<p>Describe the code conventions followed in your implementation.  The conventions should cover naming (of fields, methods, classes, packages, etc.) and formatting (indentation, comment style, etc.).  If you follow existing code conventions, such as one of the following, you can simply give the name and URL.  It's a good idea to use a style checker, if available.</p>

<p>Java:
<a href="https://google.github.io/styleguide/javaguide.html">Google Java Style Guide</a>, 
<a href="http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html">Code Conventions for the Java</a>.
Check adherence using <a href="http://checkstyle.sourceforge.net/">Checkstyle</a>.</p>

<p>JavaScript:
<a href="https://google.github.io/styleguide/jsguide.html">Google JavaScript Style Guide
</a></p>

<p>Python: 
<a href="https://www.python.org/dev/peps/pep-0008/">PEP 8 -- Style Guide for Python Code</a>.  Check adherence using pep8 or Pylint.
</p>

<hr>
<h3>3. Implementation Status Report</h3>

<p>This report should indicate which classes and components in the design documents are implemented.  It should also include a filled-out copy of the implementation grading sheet (fill the "claimed points" column) that shows your system's current score, as a way of indicating which requirements are satisfied or partially satisfied.  This score also serves as a progress estimate.</p>

<p>The filled-out implementation grading sheet should be included in the electronic submission in xlsx format, so the TAs can fill the "actual points" column and enter grading comments. [2020-03-12 added this]</p>

<p>The implementation period mainly begins after submission of hw3-design and continues until submission of hw10-code3.  This period spans almost 9 weeks, although there is less focus on implementation (due to other tasks) during the first few weeks and more focus on implementation during the last few weeks.  hw6-code1 is due almost 3 weeks into this period, so the implementation should be about 25% complete when this assignment is submitted.  in other words, the code in your hw6-code1 submission should contain enough functionality to achieve a score of about 25 points (or more) on the implementation grading sheet.</p>

<p>You can claim partial credit for functionality that is partially implemented.  You must indicate on the IGS which aspects of the functionality work (or which aspects don't work).   To claim partial credit for functionality not yet connected to the GUI, run it in an IDE or shell (make sure the font is legible in the video).</p>

<hr>
<h3>4. Installation Manual</h3>

<p>Write an installation manual that contains instructions for installing, configuring, and starting the server side of the system.  This includes instructions for downloading necessary libraries, and installing, configuring, and starting the database and web server, if appropriate.  Step-by-step textual instructions are fine; click-by-click instructions with illustrative screenshots are unnecessary.  The manual does not need to describe how to use the system; that should be self-evident from the user-friendly GUI.</p>

<hr>
<h3>5. Test Report</h3>

<p>The test report describes the testing that you have done.  This may include unit tests, integration tests, and system tests.  The reported test cases should cover all functionality described in the implementation status report as implemented.</p>

<p>The test report is mainly an organized list of test cases.  The description of each test case typically includes:</p>

<ul>
<li>Name of test case</li>

<li>Brief description, indicating the requirements, features, or use cases being tested.</li>

<li>Precondition, if any.  The test case should execute successfully from any state satisfying the precondition.  For example, a typical precondition is that a user with a specified role is logged in, or that the database contains specified records.</li>

<li>Flow of Events: a numbered list of steps, describing the inputs to the system and the expected actions by the system.</li>

<li>Outcome: whether the system passed or failed the test; in case of failure, give a brief description of the system's observed behavior, and explain the source of the problem, if possible.</li>
</ul>

<p>Collections of similar test cases should be described together in a concise way, to avoid unnecessary repetition.</p>

<hr>
<h3>6. Contributions</h3>

<p>A list of each team member's contributions to hw5 and hw6, including main activities and work products.  Additional guidance appears in the teamwork policy on the course web page.</p>

<hr>
<h3>7. Code</h3>

<p>Code for the current version of the system.  Do not include large libraries in your electronic submission.  Instead, include in the installation user manual a list of the necessary libraries (with the version number that you used) and how to install them (e.g., package manager commands, or URLs where the libraries can be downloaded and which folders to download them into). [2020-03-12 revised preceding sentence].</p>

<hr>
<h3>8. Data [2020-03-12 added this section]</h3>

<p>If you claim full points for implementing scraping college rankings (from WSJ/THE), importing College Scorecard data file, or scraping collegedata.com, then, after scraping and importing, export the contents of your college database to a csv file named colleges.csv, and include the csv file in your submission.  If you claim full points for implementing find similar high schools, then, after scraping data for the high schools used in your test cases, export the contents of your high school database to a csv file named high-schools.csv, and include the csv file in your submission. Each csv file should start with a header row containing the field names; if your database export command doesn't automatically include a header row, you can add it manually. [2020-03-14 added preceding sentence.]</p>

<p>If you use a document database, submit the exported data in both JSON format and csv format (e.g., run mongoexport with and without the <code>--type=csv</code> option). [2020-03-16 added this paragraph.]</p>

<hr>
<h3>9. Requirements</h3>

<p>Current version of the requirements document.</p>

<hr>
<h3>10. Design</h3>

<p>Current version of the design documents.

</p><hr>
<h3>11. Video</h3>

<p>A screen recording with narration showing your system exhibiting all of the functionality claimed in the implementation status report.  Plan exactly what you will do, and rehearse it a few times, before making the recording, so the video is relatively short and to-the-point.  Some data can be entered in the database before the recording begins.  The CSE416 home page contains suggestions for screen recording software.</p>

<p>The video does not need to show every test case described in the test report.  It's sufficient to show the "primary flow" for supported functionality.  For example, test cases demonstrating that the system rejects various kinds of invalid input, do not need to be shown in the video.</p>

<p>To get points for authentication, the video must show at least one test case in which a user attempts unsuccessfully to login with incorrect password and then logs in successfully with correct password.  To get points for multi-host operation, the video must show at least one test case in which the client and server run on different hosts. [2020-03-12 added this]</p>

<hr>
<h3>Writing Guidelines</h3>

<p>The guidelines in hw2-requirements apply here, too.</p>

<hr>
<h3>Submission Instructions</h3>

<p> [2020-03-12 deleted "Submit a printout of items 1-6."].  Submit items 1-10 on Blackboard in a zip (or tar) file named TEAM_NAME-hw6.zip (or TEAM_NAME-hw6.tar.gz) and containing a top-level directory named "doc" that contains all documentation (items 1-6,9-10 above) and a top-level directory named "src" that contains all code, data, configuration files, etc. (items 7-8 above).</p>

<p>Submit the video on Blackboard as a separate file named TEAM_NAME-hw6-video.mp4 (or .mkv or whatever).  Blackboard lets you submit multiple files for an assignment.</p>

<p>If uploading your video file on Blackboard is problematic, you can instead store it elsewhere online (e.g., Google Drive), and upload the URL on Blackboard in a separate file named TEAM_NAME-hw6-video-URL.txt.  Make sure the TAs and instructor have permission to access the file!  You can grant us access individually using our NetIDs or make the file accessible to everyone with the link. </p>

<hr>
<h3>Grading</h3>

<p>
<table border="1" cellpadding="2">
<tbody>
<tr><td>Persistence</td><td>10%</td></tr>
<tr><td>Installation manual</td><td>10%</td></tr>
<tr><td>Implementation</td><td>80%</td></tr>
</tbody>
</table>
</p>

<p>Grading of the implementation is based on (1) sufficient progress with the implementation, (2) code quality, (3) accurately scraped/imported data (if applicable; see Section 8), and (4) the quality of the status report, video, and testing.  Inaccurate status reports will be penalized.</p>

<p>Code quality includes:
</p><ul>
<li>Use of appropriate data structures and algorithms</li> 
  
<li>Meaningful names for classes, methods, variables, etc.</li> 

<li>Consistent adherence to code conventions</li>

<li>Appropriate comments in the code to enable reviewers to understand it.  Include useful comments.  Don't include "obvious" comments just to have more comments.</li>

<li>Appropriate use of language features such as inheritance, methods, generic types, enumeration types, for-each loops, and assertions.  For example, methods, inheritance, and loops should be used to avoid repeating blocks of identical, or nearly identical, code.</li>
  
<li>Modularity.  The code should be structured in a reasonable way into packages, classes, and methods.</li>

<li>Consistency with current version of the design documents.  It's fine for the design to evolve, provided the design documents are kept up-to-date.</li>

<li>Consistency with requirements</li>
  </ul>
  <p></p></body></html>